{"ast":null,"code":"export default {\n  name: 'ShowNotes',\n  props: ['note', 'i'],\n  data: function () {\n    return {\n      startCoords: [],\n      saveCoords: [],\n      distance: [],\n      index: '',\n      notes: [],\n      action: false,\n      areaWidth: window.visualViewport.width,\n      areaHeight: window.visualViewport.height\n    };\n  },\n  methods: {\n    show() {\n      this.notes[this.index].x = this.distance.x;\n      this.notes[this.index].y = this.distance.y;\n      this.$emit('moveNote', this.notes);\n    },\n    startMove() {\n      this.index = this.$el;\n      //.getAttribute('data-key');\n      console.log(this.index);\n      this.notes = JSON.parse(localStorage.getItem('notes'));\n      this.startCoords = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      // this.saveCoords = ({\n      //   x: this.notes[this.index].x,\n      //   y: this.notes[this.index].y\n      // })\n      this.action = true;\n    },\n    finishMove() {\n      this.action = false;\n      localStorage.setItem('notes', JSON.stringify(this.notes));\n    },\n    move() {\n      if (this.action) {\n        this.distance = {\n          x: this.saveCoords.x + event.pageX - this.startCoords.x,\n          y: this.saveCoords.y + event.pageY - this.startCoords.y\n        };\n        if (this.distance.x > this.areaWidth - this.$el.clientWidth) {\n          this.distance.x = this.areaWidth - this.$el.clientWidth;\n        }\n        if (this.distance.y > this.areaHeight - this.$el.clientHeight) {\n          this.distance.y = this.areaHeight - this.$el.clientHeight;\n        }\n        if (this.distance.y < 40) {\n          this.distance.y = 40;\n        }\n        if (this.distance.x < 0) {\n          this.distance.x = 0;\n        }\n        this.show();\n      }\n    },\n    delNotes() {\n      let index = this.$el.getAttribute('data-key');\n      this.notes = JSON.parse(localStorage.getItem('notes'));\n      let delNote = this.notes.splice(index, 1);\n      this.$emit('moveNote', this.notes);\n      localStorage.setItem('notes', JSON.stringify(this.notes));\n      this.$emit('message', delNote[0].tit);\n    },\n    editNotes() {\n      let index = this.$el.getAttribute('data-key');\n      localStorage.setItem('index', index);\n      this.$emit('sendIndex');\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","startCoords","saveCoords","distance","index","notes","action","areaWidth","window","visualViewport","width","areaHeight","height","methods","show","x","y","$emit","startMove","$el","console","log","JSON","parse","localStorage","getItem","event","pageX","pageY","finishMove","setItem","stringify","move","clientWidth","clientHeight","delNotes","getAttribute","delNote","splice","tit","editNotes"],"sources":["src/components/ShowNotes.vue"],"sourcesContent":["<template>\n  <div class=\"wropp\">\n    <div class=\"note\" v-bind:style=\"{ top: note.y + 'px', left: note.x + 'px'}\" :data-key=i \n    @mousedown=\"startMove()\" @mouseup=\"finishMove()\" @mousemove=\"move()\">\n      <h5 class=\"title-note\">{{ note.tit }}</h5>\n      <h5 class=\"category-title\">{{ note.cat }}</h5>\n      <div class=\"btn-block\">\n        <div class=\"btn-edit\" @click=\"editNotes ()\"></div>\n        <div class=\"btn-del\" @click=\"delNotes()\"></div>\n      </div>\n      <p class=\"note-text\">{{ note.con }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'ShowNotes',\n    props: ['note', 'i'],\n    data: function () {\n      return {\n        startCoords: [],\n        saveCoords: [],\n        distance: [],\n        index: '',\n        notes: [],\n        action: false,\n        areaWidth: window.visualViewport.width,\n        areaHeight: window.visualViewport.height,\n      }\n    },\n    methods: {\n      show () {\n        this.notes[this.index].x = this.distance.x;\n        this.notes[this.index].y = this.distance.y;\n        this.$emit('moveNote', this.notes);\n      },\n      startMove () {\n        this.index = this.$el\n        //.getAttribute('data-key');\n        console.log(this.index);\n        this.notes = JSON.parse(localStorage.getItem('notes'));\n        this.startCoords = ({\n          x: event.pageX,\n          y: event.pageY\n        });\n        // this.saveCoords = ({\n        //   x: this.notes[this.index].x,\n        //   y: this.notes[this.index].y\n        // })\n        this.action = true;\n      },\n      finishMove () {\n        this.action = false;\n        localStorage.setItem('notes', JSON.stringify(this.notes))\n      },\n      move () {\n        if (this.action) {\n          this.distance = ({\n            x: (this.saveCoords.x + event.pageX - this.startCoords.x),\n            y: (this.saveCoords.y + event.pageY - this.startCoords.y)\n          });\n          if (this.distance.x > this.areaWidth - this.$el.clientWidth) {\n            this.distance.x = this.areaWidth - this.$el.clientWidth;\n          } \n          if (this.distance.y > this.areaHeight - this.$el.clientHeight) {\n            this.distance.y = this.areaHeight - this.$el.clientHeight;\n          } \n          if (this.distance.y < 40) {\n            this.distance.y = 40;\n          }\n          if (this.distance.x < 0) {\n            this.distance.x = 0;\n          } \n          this.show();\n        }\n      },\n      delNotes () {\n        let index = this.$el.getAttribute('data-key');\n        this.notes = JSON.parse(localStorage.getItem('notes'));\n        let delNote = this.notes.splice(index, 1);\n        this.$emit('moveNote', this.notes);\n        localStorage.setItem('notes', JSON.stringify(this.notes))\n        this.$emit('message', delNote[0].tit);\n      },\n      editNotes () {\n        let index = this.$el.getAttribute('data-key');\n        localStorage.setItem('index', index);\n        this.$emit('sendIndex');\n      }\n    } \n  }\n</script>"],"mappings":"AAgBA;EACAA,IAAA;EACAC,KAAA;EACAC,IAAA,WAAAA,CAAA;IACA;MACAC,WAAA;MACAC,UAAA;MACAC,QAAA;MACAC,KAAA;MACAC,KAAA;MACAC,MAAA;MACAC,SAAA,EAAAC,MAAA,CAAAC,cAAA,CAAAC,KAAA;MACAC,UAAA,EAAAH,MAAA,CAAAC,cAAA,CAAAG;IACA;EACA;EACAC,OAAA;IACAC,KAAA;MACA,KAAAT,KAAA,MAAAD,KAAA,EAAAW,CAAA,QAAAZ,QAAA,CAAAY,CAAA;MACA,KAAAV,KAAA,MAAAD,KAAA,EAAAY,CAAA,QAAAb,QAAA,CAAAa,CAAA;MACA,KAAAC,KAAA,kBAAAZ,KAAA;IACA;IACAa,UAAA;MACA,KAAAd,KAAA,QAAAe,GAAA;MACA;MACAC,OAAA,CAAAC,GAAA,MAAAjB,KAAA;MACA,KAAAC,KAAA,GAAAiB,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,KAAAxB,WAAA;QACAc,CAAA,EAAAW,KAAA,CAAAC,KAAA;QACAX,CAAA,EAAAU,KAAA,CAAAE;MACA;MACA;MACA;MACA;MACA;MACA,KAAAtB,MAAA;IACA;IACAuB,WAAA;MACA,KAAAvB,MAAA;MACAkB,YAAA,CAAAM,OAAA,UAAAR,IAAA,CAAAS,SAAA,MAAA1B,KAAA;IACA;IACA2B,KAAA;MACA,SAAA1B,MAAA;QACA,KAAAH,QAAA;UACAY,CAAA,OAAAb,UAAA,CAAAa,CAAA,GAAAW,KAAA,CAAAC,KAAA,QAAA1B,WAAA,CAAAc,CAAA;UACAC,CAAA,OAAAd,UAAA,CAAAc,CAAA,GAAAU,KAAA,CAAAE,KAAA,QAAA3B,WAAA,CAAAe;QACA;QACA,SAAAb,QAAA,CAAAY,CAAA,QAAAR,SAAA,QAAAY,GAAA,CAAAc,WAAA;UACA,KAAA9B,QAAA,CAAAY,CAAA,QAAAR,SAAA,QAAAY,GAAA,CAAAc,WAAA;QACA;QACA,SAAA9B,QAAA,CAAAa,CAAA,QAAAL,UAAA,QAAAQ,GAAA,CAAAe,YAAA;UACA,KAAA/B,QAAA,CAAAa,CAAA,QAAAL,UAAA,QAAAQ,GAAA,CAAAe,YAAA;QACA;QACA,SAAA/B,QAAA,CAAAa,CAAA;UACA,KAAAb,QAAA,CAAAa,CAAA;QACA;QACA,SAAAb,QAAA,CAAAY,CAAA;UACA,KAAAZ,QAAA,CAAAY,CAAA;QACA;QACA,KAAAD,IAAA;MACA;IACA;IACAqB,SAAA;MACA,IAAA/B,KAAA,QAAAe,GAAA,CAAAiB,YAAA;MACA,KAAA/B,KAAA,GAAAiB,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,IAAAY,OAAA,QAAAhC,KAAA,CAAAiC,MAAA,CAAAlC,KAAA;MACA,KAAAa,KAAA,kBAAAZ,KAAA;MACAmB,YAAA,CAAAM,OAAA,UAAAR,IAAA,CAAAS,SAAA,MAAA1B,KAAA;MACA,KAAAY,KAAA,YAAAoB,OAAA,IAAAE,GAAA;IACA;IACAC,UAAA;MACA,IAAApC,KAAA,QAAAe,GAAA,CAAAiB,YAAA;MACAZ,YAAA,CAAAM,OAAA,UAAA1B,KAAA;MACA,KAAAa,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}